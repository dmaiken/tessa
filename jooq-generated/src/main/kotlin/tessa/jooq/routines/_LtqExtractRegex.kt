/*
 * This file is generated by jOOQ.
 */
package tessa.jooq.routines


import org.jooq.Field
import org.jooq.Parameter
import org.jooq.impl.AbstractRoutine
import org.jooq.impl.DSL
import org.jooq.impl.DefaultDataType
import org.jooq.impl.Internal
import org.jooq.postgres.extensions.bindings.LtreeArrayBinding
import org.jooq.postgres.extensions.bindings.LtreeBinding
import org.jooq.postgres.extensions.types.Ltree

import tessa.jooq.Public


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class _LtqExtractRegex : AbstractRoutine<Ltree>(
    "_ltq_extract_regex",
    Public.PUBLIC,
    DSL.comment(""),
    DefaultDataType.getDefaultDataType("\"public\".\"ltree\""),
    LtreeBinding()
) {
    companion object {

        /**
         * The parameter <code>public._ltq_extract_regex.RETURN_VALUE</code>.
         */
        val RETURN_VALUE: Parameter<Ltree?> = Internal.createParameter(
            "RETURN_VALUE",
            DefaultDataType.getDefaultDataType("\"public\".\"ltree\""),
            false,
            false,
            LtreeBinding()
        )

        /**
         * The parameter <code>public._ltq_extract_regex._1</code>.
         */
        val _1: Parameter<Array<org.jooq.postgres.extensions.types.Ltree?>?> = Internal.createParameter(
            "_1",
            DefaultDataType.getDefaultDataType("\"public\".\"ltree\"").array(),
            false,
            true,
            LtreeArrayBinding()
        )
        @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
        val _2: Parameter<Any?> =
            Internal.createParameter("_2", DefaultDataType.getDefaultDataType("\"public\".\"lquery\""), false, true)
    }

    init {
        returnParameter = _LtqExtractRegex.RETURN_VALUE
        addInParameter(_LtqExtractRegex._1)
        addInParameter(_LtqExtractRegex._2)
    }

    /**
     * Set the <code>_1</code> parameter IN value to the routine
     */
    fun set__1(value: Array<org.jooq.postgres.extensions.types.Ltree?>?): Unit = setValue(_LtqExtractRegex._1, value)

    /**
     * Set the <code>_1</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__1(field: Field<Array<org.jooq.postgres.extensions.types.Ltree?>?>): Unit {
        setField(_LtqExtractRegex._1, field)
    }

    /**
     * Set the <code>_2</code> parameter IN value to the routine
     */
    fun set__2(value: Any?): Unit = setValue(_LtqExtractRegex._2, value)

    /**
     * Set the <code>_2</code> parameter to the function to be used with a
     * {@link org.jooq.Select} statement
     */
    fun set__2(field: Field<Any?>): Unit {
        setField(_LtqExtractRegex._2, field)
    }
}
